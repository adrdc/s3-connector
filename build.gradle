/*
 * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Build gradle file for the S3 connector
 */

plugins {
    id 'java'
    id 'distribution'
    id 'maven'
    id 'com.github.davidmc24.gradle.plugin.avro-base' version "1.2.1"
    id 'checkstyle'
}

apply from: "$rootDir/gradle/checkstyle.gradle"
apply plugin: "com.github.davidmc24.gradle.plugin.avro"
sourceSets.main.java.srcDirs += 'build/generated-test-avro-java/'

avro {
    // prestoDb right now fails with avro String -> varchar
    stringType = "CharSequence"
}

repositories {
    mavenLocal()

    maven {
        url = uri('https://repo.maven.apache.org/maven2')
    }
}

configurations {
    compile.transitive = false
}

dependencies {
    compile "io.trino:trino-client:${trinoVersion}"
    compile "io.trino:trino-main:${trinoVersion}"
    compile "io.trino:trino-plugin-toolkit:${trinoVersion}"
    compile "io.trino:trino-record-decoder:${trinoVersion}"
    compile "io.trino:trino-server-dev:${trinoVersion}"
    compile "io.trino:trino-server-main:${trinoVersion}"
    compile "io.trino:trino-parquet:${trinoVersion}"
    compile "io.trino:trino-hive:${trinoVersion}"
    compile "io.trino:trino-hive-hadoop2:${trinoVersion}"
    compile "io.trino:trino-spi:${trinoVersion}"

    compile "io.airlift:bootstrap:${airliftVersion}"
    compile "io.airlift:configuration:${airliftVersion}"
    compile "io.airlift:json:${airliftVersion}"
    compile "io.airlift:log:${airliftVersion}"
    compile 'io.airlift:units:1.6'

    compile 'com.fasterxml.jackson.core:jackson-core:2.12.2'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.12.2'
    compile 'com.github.erosb:everit-json-schema:1.12.1'
    compile 'com.google.guava:guava:30.1.1-jre'
    compile 'com.google.inject:guice:5.0.1'
    compile 'com.google.protobuf:protobuf-java:3.12.0'
    compile 'com.linkedin.calcite:calcite-core:1.21.0.146'

    compile "com.amazonaws:aws-java-sdk-s3:${awsSDKVersion}"
    compile "com.amazonaws:aws-java-sdk-core:${awsSDKVersion}"

    compile 'javax.inject:javax.inject:1'
    compile 'javax.validation:validation-api:2.0.1.Final'
    compile 'org.apache.avro:avro:1.9.2'
    compile 'io.airlift:slice:0.39'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.12.2'
    compile 'org.openjdk.jol:jol-core:0.2'
    compile "com.opencsv:opencsv:${openCSVVer}"

    compile "org.apache.parquet:parquet-hadoop:${apacheParquetVersion}"
    compile "org.apache.parquet:parquet-column:${apacheParquetVersion}"

    runtimeOnly "io.airlift:log-manager:${airliftVersion}"
    runtimeOnly 'com.emc.ecs:object-transform:1.1.0'
    runtimeOnly 'com.emc.ecs:smart-client:2.2.1'
    runtimeOnly 'org.glassfish.jersey.core:jersey-server:2.30'
    runtimeOnly 'org.javassist:javassist:3.25.0-GA'
    runtimeOnly 'org.jetbrains:annotations:19.0.0'
    runtimeOnly 'org.yaml:snakeyaml:1.27'

    compile "io.pravega:schemaregistry-common:${pravegaSchemaRegistryVersion}"
    compile "io.pravega:pravega-common:${pravegaVersion}"
    compile "io.pravega:schemaregistry-client:${pravegaSchemaRegistryVersion}"
    compile "io.pravega:schemaregistry-contract:${pravegaSchemaRegistryVersion}"
    testImplementation "io.pravega:schemaregistry-server:${pravegaSchemaRegistryVersion}"

    testImplementation "io.trino:trino-memory:${trinoVersion}"
    testImplementation "io.trino:trino-benchmark:${trinoVersion}"
    testImplementation "io.trino:trino-spi:${trinoVersion}"
    testImplementation "io.trino:trino-testing:${trinoVersion}"
    testImplementation "io.trino:trino-testing-services:${trinoVersion}"
    testImplementation "io.trino:trino-tpch:${trinoVersion}"

    testImplementation "io.airlift:testing:${airliftVersion}"
    testImplementation 'io.pravega:pravega-standalone:0.9.0'
    testImplementation 'org.assertj:assertj-core:3.18.1'
    testImplementation 'org.openjdk.jmh:jmh-core:1.20'
    testImplementation 'org.openjdk.jmh:jmh-generator-annprocess:1.20'
    testImplementation 'org.testng:testng:6.10'
}

group = 'io.trino'
version = '359'
sourceCompatibility = '11'
targetCompatibility = '11'

compileJava {
options.debug = true
options.debugOptions.debugLevel = 'lines,source'
options.deprecation = true
}

task copyDependentJars(type: Copy) {
    println configurations.compile
    from configurations.runtime
    into "$buildDir/plugin/libs/s3"
}

jar {
    baseName = 's3-connector'
    destinationDir = file("$buildDir/plugin/libs/s3")
    manifest {
        attributes "Main-Class": "com.facebook.presto.s3"
    }
}

plugins.withType(DistributionPlugin) {
    distTar {
        compression = Compression.GZIP
        extension = 'tar.gz'
    }
}

distributions {
    main {
        contents {
            distributionBaseName = 's3-prestopresto-connector'
            from(project.configurations.runtime)
            from jar
        }
    }
}

task zip(type: Zip) {
    into "$buildDir/plugin/libs/s3"
    into (project.name + '-' + project.version)
}

def integration = project.hasProperty("integration")

test {
    maxHeapSize = "2048m"
    useTestNG() {
        suites "src/test/unit-test.xml"
        if (integration) {
            suites "src/test/integration-test.xml"
        }
    }
}

jar.dependsOn(copyDependentJars)
